/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * harvest-api
 *  HarvestOS is a custom learning management platform for SERC

    It purposefully blends the learning management system with the
    game based learning platform to create a unique learning.

    
 * OpenAPI spec version: 0.3.5
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  YearResponse,
  YearRequest,
  TermRequest,
  TermResponse,
  DraftTeachableUnitAbridgedResponse,
  DraftTeachableUnitCreateRequest,
  DraftTeachableUnitResponse,
  DraftTeachableUnitRequest,
  ContentUpdateRequest,
  DraftWeeklyTopicAbridgedResponse,
  DraftWeeklyTopicResponse,
  DraftWeeklyTopicCreateRequest,
  DraftWeeklyTopicRequest,
  UserResponse,
  GetUsersForAdminWithLimitsParams,
  UserRequest,
  GetUsersForAdminParams
} from '.././models'



  /**
 * Get the school years.
 * @summary Get School Years
 */
export const getSchoolYears = <TData = AxiosResponse<YearResponse[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/school/year`,options
    );
  }
/**
 * Get the school years.
 * @summary Create School Years
 */
export const createSchoolYears = <TData = AxiosResponse<YearResponse>>(
    yearRequest: YearRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/admin/school/year`,
      yearRequest,options
    );
  }
/**
 * @summary Get School Year By Id
 */
export const getSchoolYearById = <TData = AxiosResponse<YearResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/school/year/${id}`,options
    );
  }
/**
 * Update the school year name
 * @summary Update School Year
 */
export const updateSchoolYear = <TData = AxiosResponse<YearResponse>>(
    id: string,
    yearRequest: YearRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/admin/school/year/${id}`,
      yearRequest,options
    );
  }
/**
 * @summary Get School Year Terms
 */
export const getSchoolYearTerms = <TData = AxiosResponse<unknown>>(
    yearId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/school/year/${yearId}/term`,options
    );
  }
/**
 * @summary Create School Year Term
 */
export const createSchoolYearTerm = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termRequest: TermRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/admin/school/year/${yearId}/term`,
      termRequest,options
    );
  }
/**
 * @summary Get School Year Term By Id
 */
export const getSchoolYearTermById = <TData = AxiosResponse<TermResponse>>(
    yearId: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/school/year/${yearId}/term/${id}`,options
    );
  }
/**
 * @summary Update School Year Term
 */
export const updateSchoolYearTerm = <TData = AxiosResponse<TermResponse>>(
    yearId: string,
    id: string,
    termRequest: TermRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/admin/school/year/${yearId}/term/${id}`,
      termRequest,options
    );
  }
/**
 * Get a list of draft units for a year and term.

These endpoints return an abridged version of the models
to prevent a large payload being sent down. The client should
subsequently call the endpoint for the full model.
 * @summary Draft Units
 */
export const draftUnits = <TData = AxiosResponse<DraftTeachableUnitAbridgedResponse[]>>(
    yearId: string,
    termId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit`,options
    );
  }
/**
 * Create a Draft Unit for a Year and Term and
auto number it in the sequence.
 * @summary Create Draft Unit
 */
export const createDraftUnit = <TData = AxiosResponse<DraftTeachableUnitAbridgedResponse>>(
    yearId: string,
    termId: string,
    draftTeachableUnitCreateRequest: DraftTeachableUnitCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit`,
      draftTeachableUnitCreateRequest,options
    );
  }
/**
 * Get a list of draft units
 * @summary Draft Unit By Id
 */
export const draftUnitById = <TData = AxiosResponse<DraftTeachableUnitResponse>>(
    yearId: string,
    termId: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}`,options
    );
  }
/**
 * Updates a draft unit in it's entirety
 * @summary Update Draft Unit
 */
export const updateDraftUnit = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    draftTeachableUnitRequest: DraftTeachableUnitRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}`,
      draftTeachableUnitRequest,options
    );
  }
/**
 * Get a list of draft units
 * @summary Remove Draft Unit
 */
export const removeDraftUnit = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}`,options
    );
  }
/**
 * Updates a draft unit title
 * @summary Update Draft Unit Title
 */
export const updateDraftUnitTitle = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/title`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit intention
 * @summary Update Draft Unit Intention
 */
export const updateDraftUnitIntention = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/intention`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit stem_circle_outcomes
 * @summary Update Draft Unit Outcomes
 */
export const updateDraftUnitOutcomes = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/outcomes`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit core_content
 * @summary Update Draft Unit Core
 */
export const updateDraftUnitCore = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/core`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit stem_practices
 * @summary Update Draft Unit Practices
 */
export const updateDraftUnitPractices = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/practices`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit learning_progressions
 * @summary Update Draft Unit Progressions
 */
export const updateDraftUnitProgressions = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/progressions`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit learning_success_criteria
 * @summary Update Draft Unit Criteria
 */
export const updateDraftUnitCriteria = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/criteria`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft unit resources
 * @summary Update Draft Unit Resources
 */
export const updateDraftUnitResources = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${id}/resources`,
      contentUpdateRequest,options
    );
  }
/**
 * Get a list of draft units
 * @summary Draft Topics
 */
export const draftTopics = <TData = AxiosResponse<DraftWeeklyTopicAbridgedResponse[]>>(
    yearId: string,
    termId: string,
    unitId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic`,options
    );
  }
/**
 * Get a list of draft units
 * @summary Create Draft Topic
 */
export const createDraftTopic = <TData = AxiosResponse<DraftWeeklyTopicResponse>>(
    yearId: string,
    termId: string,
    unitId: string,
    draftWeeklyTopicCreateRequest: DraftWeeklyTopicCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic`,
      draftWeeklyTopicCreateRequest,options
    );
  }
/**
 * Get a list of draft units
 * @summary Draft Topic By Id
 */
export const draftTopicById = <TData = AxiosResponse<DraftWeeklyTopicResponse>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}`,options
    );
  }
/**
 * Updates a draft topic in it's entirety
 * @summary Update Draft Topic
 */
export const updateDraftTopic = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string,
    draftWeeklyTopicRequest: DraftWeeklyTopicRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}`,
      draftWeeklyTopicRequest,options
    );
  }
/**
 * Get a list of draft units
 * @summary Remove Draft Topic
 */
export const removeDraftTopic = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}`,options
    );
  }
/**
 * Updates a draft topic title
 * @summary Update Draft Topic Title
 */
export const updateDraftTopicTitle = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}/title`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft topic experience
 * @summary Update Draft Topic Experience
 */
export const updateDraftTopicExperience = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}/experience`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft topic represent
 * @summary Update Draft Topic Represent
 */
export const updateDraftTopicRepresent = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}/represent`,
      contentUpdateRequest,options
    );
  }
/**
 * Updates a draft topic apply
 * @summary Update Draft Topic Apply
 */
export const updateDraftTopicApply = <TData = AxiosResponse<unknown>>(
    yearId: string,
    termId: string,
    unitId: string,
    id: string,
    contentUpdateRequest: ContentUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/content/draft/year/${yearId}/term/${termId}/unit/${unitId}/topic/${id}/apply`,
      contentUpdateRequest,options
    );
  }
/**
 * @summary Query users between limits
 */
export const getUsersForAdminWithLimits = <TData = AxiosResponse<UserResponse[]>>(
    params?: GetUsersForAdminWithLimitsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * Creates a new user based on
 * @summary Create a new user
 */
export const createUserByAdmin = <TData = AxiosResponse<UserResponse>>(
    userRequest: UserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/admin/users`,
      userRequest,options
    );
  }
/**
 * @summary Get all users
 */
export const getUsersForAdmin = <TData = AxiosResponse<UserResponse[]>>(
    params?: GetUsersForAdminParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/users/infinite`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * Get a user by their id
 * @summary Get a particular user
 */
export const getUserForAdminById = <TData = AxiosResponse<UserResponse>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/admin/users/${id}`,options
    );
  }
/**
 * Delete a user from the database

The endpoint will look to see if the user exists, and if so
will attempt to delete the user from the database and
return a 204 response. If the user does not exist, a 404
 * @summary Delete a particular user
 */
export const deleteUserByAdmin = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/admin/users/${id}`,options
    );
  }
/**
 * @summary Update a particular user
 */
export const updateUserByAdmin = <TData = AxiosResponse<unknown>>(
    id: string,
    userRequest: UserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/api/admin/users/${id}`,
      userRequest,options
    );
  }
export type GetSchoolYearsResult = AxiosResponse<YearResponse[]>
export type CreateSchoolYearsResult = AxiosResponse<YearResponse>
export type GetSchoolYearByIdResult = AxiosResponse<YearResponse>
export type UpdateSchoolYearResult = AxiosResponse<YearResponse>
export type GetSchoolYearTermsResult = AxiosResponse<unknown>
export type CreateSchoolYearTermResult = AxiosResponse<unknown>
export type GetSchoolYearTermByIdResult = AxiosResponse<TermResponse>
export type UpdateSchoolYearTermResult = AxiosResponse<TermResponse>
export type DraftUnitsResult = AxiosResponse<DraftTeachableUnitAbridgedResponse[]>
export type CreateDraftUnitResult = AxiosResponse<DraftTeachableUnitAbridgedResponse>
export type DraftUnitByIdResult = AxiosResponse<DraftTeachableUnitResponse>
export type UpdateDraftUnitResult = AxiosResponse<unknown>
export type RemoveDraftUnitResult = AxiosResponse<unknown>
export type UpdateDraftUnitTitleResult = AxiosResponse<unknown>
export type UpdateDraftUnitIntentionResult = AxiosResponse<unknown>
export type UpdateDraftUnitOutcomesResult = AxiosResponse<unknown>
export type UpdateDraftUnitCoreResult = AxiosResponse<unknown>
export type UpdateDraftUnitPracticesResult = AxiosResponse<unknown>
export type UpdateDraftUnitProgressionsResult = AxiosResponse<unknown>
export type UpdateDraftUnitCriteriaResult = AxiosResponse<unknown>
export type UpdateDraftUnitResourcesResult = AxiosResponse<unknown>
export type DraftTopicsResult = AxiosResponse<DraftWeeklyTopicAbridgedResponse[]>
export type CreateDraftTopicResult = AxiosResponse<DraftWeeklyTopicResponse>
export type DraftTopicByIdResult = AxiosResponse<DraftWeeklyTopicResponse>
export type UpdateDraftTopicResult = AxiosResponse<unknown>
export type RemoveDraftTopicResult = AxiosResponse<unknown>
export type UpdateDraftTopicTitleResult = AxiosResponse<unknown>
export type UpdateDraftTopicExperienceResult = AxiosResponse<unknown>
export type UpdateDraftTopicRepresentResult = AxiosResponse<unknown>
export type UpdateDraftTopicApplyResult = AxiosResponse<unknown>
export type GetUsersForAdminWithLimitsResult = AxiosResponse<UserResponse[]>
export type CreateUserByAdminResult = AxiosResponse<UserResponse>
export type GetUsersForAdminResult = AxiosResponse<UserResponse[]>
export type GetUserForAdminByIdResult = AxiosResponse<UserResponse>
export type DeleteUserByAdminResult = AxiosResponse<void>
export type UpdateUserByAdminResult = AxiosResponse<unknown>
