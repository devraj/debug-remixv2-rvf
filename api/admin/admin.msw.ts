/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * harvest-api
 *  HarvestOS is a custom learning management platform for SERC

    It purposefully blends the learning management system with the
    game based learning platform to create a unique learning.

    
 * OpenAPI spec version: 0.3.5
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getGetSchoolYearsMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), terms: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), startMonth: faker.datatype.number({min: undefined, max: undefined}), endMonth: faker.datatype.number({min: undefined, max: undefined})}))})))

export const getCreateSchoolYearsMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), terms: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), startMonth: faker.datatype.number({min: undefined, max: undefined}), endMonth: faker.datatype.number({min: undefined, max: undefined})}))})

export const getGetSchoolYearByIdMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), terms: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), startMonth: faker.datatype.number({min: undefined, max: undefined}), endMonth: faker.datatype.number({min: undefined, max: undefined})}))})

export const getUpdateSchoolYearMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), terms: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), startMonth: faker.datatype.number({min: undefined, max: undefined}), endMonth: faker.datatype.number({min: undefined, max: undefined})}))})

export const getGetSchoolYearTermByIdMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), startMonth: faker.datatype.number({min: undefined, max: undefined}), endMonth: faker.datatype.number({min: undefined, max: undefined})})

export const getUpdateSchoolYearTermMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), name: faker.random.word(), startMonth: faker.datatype.number({min: undefined, max: undefined}), endMonth: faker.datatype.number({min: undefined, max: undefined})})

export const getDraftUnitsMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftWeeklyTopics: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftTeachableUnitId: faker.datatype.uuid()}))})))

export const getCreateDraftUnitMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftWeeklyTopics: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftTeachableUnitId: faker.datatype.uuid()}))})

export const getDraftUnitByIdMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftWeeklyTopics: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftTeachableUnitId: faker.datatype.uuid()})), learningIntention: faker.helpers.arrayElement([faker.random.word(),{}]), stemCirruculumOutcomes: faker.helpers.arrayElement([faker.random.word(),{}]), coreContent: faker.helpers.arrayElement([faker.random.word(),{}]), stemPractices: faker.helpers.arrayElement([faker.random.word(),{}]), teacherNotes: faker.helpers.arrayElement([faker.random.word(),{}]), learningProgressions: faker.helpers.arrayElement([faker.random.word(),{}]), learningSuccessCriteria: faker.helpers.arrayElement([faker.random.word(),{}]), resources: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getDraftTopicsMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftTeachableUnitId: faker.datatype.uuid()})))

export const getCreateDraftTopicMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftTeachableUnitId: faker.datatype.uuid(), experience: faker.helpers.arrayElement([faker.random.word(),{}]), represent: faker.helpers.arrayElement([faker.random.word(),{}]), apply: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getDraftTopicByIdMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), number: faker.datatype.number({min: undefined, max: undefined}), title: faker.random.word(), schoolYearId: faker.datatype.uuid(), schoolTermId: faker.datatype.uuid(), draftTeachableUnitId: faker.datatype.uuid(), experience: faker.helpers.arrayElement([faker.random.word(),{}]), represent: faker.helpers.arrayElement([faker.random.word(),{}]), apply: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getGetUsersForAdminWithLimitsMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})))

export const getCreateUserByAdminMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getGetUsersForAdminMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})))

export const getGetUserForAdminByIdMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getAdminMSW = () => [
rest.get('*/api/admin/school/year', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetSchoolYearsMock()),
        )
      }),rest.post('*/api/admin/school/year', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateSchoolYearsMock()),
        )
      }),rest.get('*/api/admin/school/year/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetSchoolYearByIdMock()),
        )
      }),rest.put('*/api/admin/school/year/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUpdateSchoolYearMock()),
        )
      }),rest.get('*/api/admin/school/year/:yearId/term', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/api/admin/school/year/:yearId/term', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/admin/school/year/:yearId/term/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetSchoolYearTermByIdMock()),
        )
      }),rest.put('*/api/admin/school/year/:yearId/term/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUpdateSchoolYearTermMock()),
        )
      }),rest.get('*/api/admin/content/draft/year/:yearId/term/:termId/unit', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDraftUnitsMock()),
        )
      }),rest.post('*/api/admin/content/draft/year/:yearId/term/:termId/unit', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateDraftUnitMock()),
        )
      }),rest.get('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDraftUnitByIdMock()),
        )
      }),rest.put('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.delete('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/title', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/intention', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/outcomes', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/core', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/practices', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/progressions', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/criteria', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:id/resources', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDraftTopicsMock()),
        )
      }),rest.post('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateDraftTopicMock()),
        )
      }),rest.get('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDraftTopicByIdMock()),
        )
      }),rest.put('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.delete('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id/title', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id/experience', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id/represent', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/content/draft/year/:yearId/term/:termId/unit/:unitId/topic/:id/apply', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/admin/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUsersForAdminWithLimitsMock()),
        )
      }),rest.post('*/api/admin/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateUserByAdminMock()),
        )
      }),rest.get('*/api/admin/users/infinite', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUsersForAdminMock()),
        )
      }),rest.get('*/api/admin/users/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserForAdminByIdMock()),
        )
      }),rest.delete('*/api/admin/users/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/admin/users/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
