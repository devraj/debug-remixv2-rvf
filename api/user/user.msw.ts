/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * harvest-api
 *  HarvestOS is a custom learning management platform for SERC

    It purposefully blends the learning management system with the
    game based learning platform to create a unique learning.

    
 * OpenAPI spec version: 0.3.5
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getGetUsersWithLimitsMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})))

export const getCreateUserMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getGetUsersMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})))

export const getGetUserByIdMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), firstName: faker.helpers.arrayElement([faker.random.word(),{}]), lastInitial: faker.helpers.arrayElement([faker.random.word(),{}]), displayableName: faker.helpers.arrayElement([faker.random.word(),{}]), avatarUrl: faker.helpers.arrayElement([faker.random.word(),{}])})

export const getUserMSW = () => [
rest.get('*/api/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUsersWithLimitsMock()),
        )
      }),rest.post('*/api/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateUserMock()),
        )
      }),rest.get('*/api/users/infinite', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUsersMock()),
        )
      }),rest.get('*/api/users/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserByIdMock()),
        )
      }),rest.delete('*/api/users/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.patch('*/api/users/:id', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
