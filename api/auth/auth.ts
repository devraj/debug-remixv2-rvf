/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * harvest-api
 *  HarvestOS is a custom learning management platform for SERC

    It purposefully blends the learning management system with the
    game based learning platform to create a unique learning.

    
 * OpenAPI spec version: 0.3.5
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  SignupResponse,
  SignupRequest,
  ResetPasswordRequest,
  OTPTriggerEmailRequest,
  OTPTriggerSMSRequest,
  InitiateResetPasswordRequest,
  VerifyAccountRequest,
  OTPVerifyRequest,
  Token,
  BodyLoginForAuthToken,
  UserResponse
} from '.././models'



  /**
 * Sign up the user using email and password

The general sign up for uses a email, password and first
and last names to create a user. The handler will check
to see if the user already exists and if not, create the
user and return a success response.
 * @summary Signup User
 */
export const signupUser = <TData = AxiosResponse<SignupResponse>>(
    signupRequest: SignupRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/signup`,
      signupRequest,options
    );
  }
/**
 * @summary Reset Password
 */
export const resetPassword = <TData = AxiosResponse<unknown>>(
    resetPasswordRequest: ResetPasswordRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/password/reset`,
      resetPasswordRequest,options
    );
  }
/**
 * Attempt to authenticate a user and issue JWT token

The user has provided us their email address and we will
attempt to authenticate them via OTP.
 * @summary Initiate Otp Email
 */
export const initiateOtpEmail = <TData = AxiosResponse<unknown>>(
    oTPTriggerEmailRequest: OTPTriggerEmailRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/initiate/otp/email`,
      oTPTriggerEmailRequest,options
    );
  }
/**
 * Attempt to authenticate a user and issue JWT token

The user has provided a mobile number and we will text them
their OTP and let them login.
 * @summary Initiate Otp Sms
 */
export const initiateOtpSms = <TData = AxiosResponse<unknown>>(
    oTPTriggerSMSRequest: OTPTriggerSMSRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/initiate/otp/sms`,
      oTPTriggerSMSRequest,options
    );
  }
/**
 * @summary Initiate Password Reset
 */
export const initiatePasswordReset = <TData = AxiosResponse<unknown>>(
    initiateResetPasswordRequest: InitiateResetPasswordRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/initiate/password/reset`,
      initiateResetPasswordRequest,options
    );
  }
/**
 * @summary Initiate Verification Email
 */
export const initiateVerificationEmail = <TData = AxiosResponse<unknown>>(
    initiateResetPasswordRequest: InitiateResetPasswordRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/initiate/verify`,
      initiateResetPasswordRequest,options
    );
  }
/**
 * Verify an account using a one time token

The signup process would have emailed the user a one time activation
token, pass this token to the user object and we can ask the account
to be set as verified.

If the token is invalid, or was never generated an obscure error 
message is to be sent back to the client, so we don't reveal that
the token or accounts status is valid
 * @summary Verify User
 */
export const verifyUser = <TData = AxiosResponse<unknown>>(
    verifyAccountRequest: VerifyAccountRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/verify/account`,
      verifyAccountRequest,options
    );
  }
/**
 * Attempt to authenticate a user and issue JWT token
 * @summary Verify Otp
 */
export const verifyOtp = <TData = AxiosResponse<unknown>>(
    oTPVerifyRequest: OTPVerifyRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/verify/otp`,
      oTPVerifyRequest,options
    );
  }
/**
 * Attempt to authenticate a user and issue JWT token

If the user does not exists or the password is incorrect
then an exception is raised which returns a 4xx response.
 * @summary Provides an endpoint for login via email and password
 */
export const loginForAuthToken = <TData = AxiosResponse<Token>>(
    bodyLoginForAuthToken: BodyLoginForAuthToken, options?: AxiosRequestConfig
 ): Promise<TData> => {const formUrlEncoded = new URLSearchParams();
if(bodyLoginForAuthToken.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyLoginForAuthToken.grant_type)
 }
formUrlEncoded.append('username', bodyLoginForAuthToken.username)
formUrlEncoded.append('password', bodyLoginForAuthToken.password)
if(bodyLoginForAuthToken.scope !== undefined) {
 formUrlEncoded.append('scope', bodyLoginForAuthToken.scope)
 }
if(bodyLoginForAuthToken.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyLoginForAuthToken.client_id)
 }
if(bodyLoginForAuthToken.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyLoginForAuthToken.client_secret)
 }

    return axios.post(
      `/api/token`,
      formUrlEncoded,options
    );
  }
/**
 * Provides a refresh token for the JWT session.

There must be a currently authenticated user for the refresh
to work, otherwise an exception is raised.
 * @summary  Provides an endpoint for refreshing the JWT token
 */
export const refreshJwtToken = <TData = AxiosResponse<Token>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/refresh`,undefined,options
    );
  }
/**
 * Ends a users session

Essentially invalidates a JWT token and then proceeds returns
a success response.
 * @summary  Provides an endpoint for logging out the user
 */
export const logoutUser = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/logout`,undefined,options
    );
  }
/**
 * Get the currently logged in user or myself

This endpoint will return the currently logged in user or raise
and exception if the user is not logged in.
 * @summary Get Me
 */
export const getMe = <TData = AxiosResponse<UserResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/me`,options
    );
  }
export type SignupUserResult = AxiosResponse<SignupResponse>
export type ResetPasswordResult = AxiosResponse<unknown>
export type InitiateOtpEmailResult = AxiosResponse<unknown>
export type InitiateOtpSmsResult = AxiosResponse<unknown>
export type InitiatePasswordResetResult = AxiosResponse<unknown>
export type InitiateVerificationEmailResult = AxiosResponse<unknown>
export type VerifyUserResult = AxiosResponse<unknown>
export type VerifyOtpResult = AxiosResponse<unknown>
export type LoginForAuthTokenResult = AxiosResponse<Token>
export type RefreshJwtTokenResult = AxiosResponse<Token>
export type LogoutUserResult = AxiosResponse<unknown>
export type GetMeResult = AxiosResponse<UserResponse>
